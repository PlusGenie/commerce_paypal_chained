<?php

/**
 * @file
 * Implements PayPal Chained Payments in Drupal Commerce checkout.
 */


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_paypal_chained_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['paypal_chained'] = array(
    'base' => 'commerce_paypal_chained',
    'title' => t('PayPal Chained'),
    'short_title' => t('PayPal'),
    'description' => t('PayPal Website Payments Standard'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Implements hook_menu().
 */
function commerce_paypal_chained_menu() {
  $items = array();

  // Define an additional IPN path that is specific to our payment method /
  // instance.
  $items['commerce_paypal/paypal-chained/ipn'] = array(
    'page callback' => 'commerce_paypal_chained_process_ipn',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Returns the default settings for the PayPal Chained payment method.
 */
function commerce_paypal_chained_default_settings() {
  $default_currency = commerce_default_currency();

  return array(
    'business' => '',
    'currency_code' => in_array($default_currency, array_keys(commerce_paypal_currencies('paypal_chained'))) ? $default_currency : 'USD',
    'allow_supported_currencies' => FALSE,
    'language' => 'US',
    'server' => 'sandbox',
    'payment_action' => 'sale',
    'ipn_logging' => 'notification',
    'receiver_emails' => '',
    'ipn_create_billing_profile' => FALSE,
    'show_payment_instructions' => FALSE,
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_paypal_chained_settings_form($settings = array()) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_paypal_chained_default_settings();

  $form['business'] = array(
    '#type' => 'textfield',
    '#title' => t('PayPal e-mail address'),
    '#description' => t('The primary e-mail address of the PayPal account you want to use to receive payments.'),
    '#default_value' => $settings['business'],
    '#required' => TRUE,
  );
  $form['currency_code'] = array(
    '#type' => 'select',
    '#title' => t('Default currency'),
    '#description' => t('Transactions in other currencies will be converted to this currency, so multi-currency sites must be configured to use appropriate conversion rates.'),
    '#options' => commerce_paypal_currencies('paypal_chained'),
    '#default_value' => $settings['currency_code'],
  );
  $form['allow_supported_currencies'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow transactions to use any currency in the options list above.'),
    '#description' => t('Transactions in unsupported currencies will still be converted into the default currency.'),
    '#default_value' => $settings['allow_supported_currencies'],
  );
  $form['language'] = array(
    '#type' => 'select',
    '#title' => t('PayPal login page language / locale'),
    '#options' => commerce_paypal_chained_languages(),
    '#default_value' => $settings['language'],
  );
  $form['server'] = array(
    '#type' => 'radios',
    '#title' => t('PayPal server'),
    '#options' => array(
      'sandbox' => ('Sandbox - use for testing, requires a PayPal Sandbox account'),
      'live' => ('Live - use for processing real transactions'),
    ),
    '#default_value' => $settings['server'],
  );
  $form['payment_action'] = array(
    '#type' => 'radios',
    '#title' => t('Payment action'),
    '#options' => array(
      'sale' => t('Sale - authorize and capture the funds at the time the payment is processed'),
      'authorization' => t('Authorization - reserve funds on the card to be captured later through your PayPal account'),
    ),
    '#default_value' => $settings['payment_action'],
  );
  $form['ipn_logging'] = array(
    '#type' => 'radios',
    '#title' => t('IPN logging'),
    '#options' => array(
      'notification' => t('Log notifications during IPN validation and processing.'),
      'full_ipn' => t('Log notifications with the full IPN during validation and processing (used for debugging).'),
    ),
    '#default_value' => $settings['ipn_logging'],
  );
  $form['receiver_emails'] = array(
    '#type' => 'textfield',
    '#title' => t('PayPal receiver e-mail addresses'),
    '#description' => t('Enter the primary e-mail address for your PayPal account if different from the one entered above or a comma separated list of all valid e-mail addresses on the account.') . '<br />' . t('IPNs that originate from payments made to a PayPal account whose e-mail address is not in this list will not be processed.'),
    '#default_value' => $settings['receiver_emails'],
  );
  $form['ipn_create_billing_profile'] = array(
    '#type' => 'checkbox',
    '#title' => t('Create a billing profile based on name and country data in the IPN for any order that does not have one yet.'),
    '#description' => t('This is most useful for sites that do not collect billing information locally but still want to have customer names on orders.'),
    '#default_value' => $settings['ipn_create_billing_profile'],
  );
  $form['show_payment_instructions'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show a message on the checkout form when PayPal Chained is selected telling the customer to "Continue with checkout to complete payment via PayPal."'),
    '#default_value' => $settings['show_payment_instructions'],
  );

  return $form;
}

/**
 * Payment method callback: adds a message to the submission form if enabled in
 * the payment method settings.
 */
function commerce_paypal_chained_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  if (!empty($payment_method['settings']['show_payment_instructions'])) {
    $form['paypal_chained_information'] = array(
      '#markup' => '<span class="commerce-paypal-chained-info">' . t('(Continue with checkout to complete payment via PayPal.)') . '</span>',
    );
  }

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_paypal_chained_form_commerce_checkout_form_alter(&$form, &$form_state) {
  // If this checkout form contains the payment method radios...
  if (!empty($form['commerce_payment']['payment_method']['#options'])) {
    // Loop over its options array looking for a PayPal Chained option.
    foreach ($form['commerce_payment']['payment_method']['#options'] as $key => &$value) {
      list($method_id, $rule_name) = explode('|', $key);

      // If we find PayPal Chained...
      if ($method_id == 'paypal_chained') {
        // Prepare the replacement radio button text with icons.
        $icons = commerce_paypal_icons();
        $value = t('!logo PayPal - pay securely without sharing your financial information', array('!logo' => $icons['paypal']));
        $value .= '<div class="commerce-paypal-icons"><span class="label">' . t('Includes:') . '</span>' . implode(' ', $icons) . '</div>';

        // Add the CSS.
        $form['commerce_payment']['payment_method']['#attached']['css'][] = drupal_get_path('module', 'commerce_paypal_chained') . '/theme/commerce_paypal_chained.theme.css';

        break;
      }
    }
  }
}

/**
 * Payment method callback: redirect form, a wrapper around the module's general
 *   use function for building a Chained form.
 */
function commerce_paypal_chained_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['business'])) {
    drupal_set_message(t('PayPal Chained is not configured for use. No PayPal e-mail address has been specified.'), 'error');
    return array();
  }

  $settings = array(
    // Return to the previous page when payment is canceled
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Return to the payment redirect page for processing successful payments
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Specify the current payment method instance ID in the notify_url
    'payment_method' => $payment_method['instance_id'],
  );

  return commerce_paypal_chained_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Payment method callback: redirect form return validation.
 */
function commerce_paypal_chained_redirect_form_validate($order, $payment_method) {
  if (!empty($payment_method['settings']['ipn_logging']) &&
    $payment_method['settings']['ipn_logging'] == 'full_ipn') {
    watchdog('commerce_paypal_chained', 'Customer returned from PayPal with the following POST data:!ipn_data', array('!ipn_data' => '<pre>' . check_plain(print_r($_POST, TRUE)) . '</pre>'), WATCHDOG_NOTICE);
  }

  // This may be an unnecessary step, but if for some reason the user does end
  // up returning at the success URL with a Failed payment, go back.
  if (!empty($_POST['payment_status']) && $_POST['payment_status'] == 'Failed') {
    return FALSE;
  }
}

/**
 * Loads a stored chained payment IPN by ID.
 *
 * @param $id
 *   The ID of the IPN to load.
 * @param $type
 *   The type of ID you've specified, either the serial numeric ipn_id or the
 *     actual PayPal pay_key. Defaults to pay_key.
 *
 * @return
 *   The original IPN with some meta data related to local processing.
 */
function commerce_paypal_chained_ipn_load($id, $type = 'pay_key') {
  // Grab the base IPN array
  $ipn = db_select('commerce_paypal_chained_ipn', 'cpci')
    ->fields('cpci')
    ->condition('cpci.' . $type, $id)
    ->execute()
    ->fetchAssoc();
  // Grab this IPN's transactions (chained payments)
  $result = db_select('commerce_paypal_chained_ipn_transaction', 'cpcit')
    ->fields('cpcit')
    ->condition('cpcit.ipn_transaction_id', $ipn['ipn_id'])
    ->execute()
    ->fetchAssoc();
  // Add these chained transactions into the IPN
  while ($record = $result->fetchAssoc()) {
    $ipn['transaction'][] = $record;
  }
  return $ipn;
}

/**
 * Saves an IPN with some meta data related to local processing.
 *
 * @param $ipn
 *   An IPN array with additional parameters associated with the IPN.
 *
 * @return
 *   TRUE on success, FALSE on failure; since the IPN is received by reference,
 *     it will also contain the serial numeric ipn_id used locally.
 */
function commerce_paypal_chained_ipn_save(&$ipn) {
  // Split our transactions off of our IPN since they get stored in different
  // tables
  $ipn_transactions = $ipn['transaction'];
  unset($ipn['transaction']);
  if (!empty($ipn['ipn_id']) && commerce_paypal_chained_ipn_load($ipn['pay_key'])) {
    // Pre-existing IPN
    // Update the changed timestamp in this IPN
    $ipn['changed'] = REQUEST_TIME;
    // Attempt to save the IPN
    if (drupal_write_record('commerce_paypal_ipn', $ipn, 'ipn_id')) {
      // Success - store the ipn transactions
      if (commerce_paypal_chained_ipn_transactions_save($ipn_transactions, $ipn['ipn_id'])) {
        $ipn['transaction'] = $ipn_transactions;
        return TRUE;
      }
      else {
        return FALSE;
      }
    }
    else {
      return FALSE;
    }
  }
  else {
    // New IPN
    $ipn['created'] = REQUEST_TIME;
    $ipn['changed'] = REQUEST_TIME;
    // Attempt to save the IPN
    if (drupal_write_record('commerce_paypal_ipn', $ipn)) {
      // Success - store the ipn transactions
      if (commerce_paypal_chained_ipn_transactions_save($ipn_transactions, $ipn['ipn_id'])) {
        $ipn['transaction'] = $ipn_transactions;
        return TRUE;
      }
      else {
        return FALSE;
      }
    }
    else {
      return FALSE;
    }
  }
}

// TODO comment this
function commerce_paypal_chained_ipn_transactions_save(&$ipn_transactions, $ipn_id) {
  foreach ($ipn_transactions as $key => $ipn_transaction) {
    $ipn_transaction['ipn_id'] = $ipn_id;
    if (!empty($ipn_transaction['ipn_transaction_id'])) {
      // Pre-existing ipn transaction
      if (drupal_write_record('commerce_paypal_chained_ipn_transaction', $ipn_transaction, 'ipn_transaction_id')) {
        // drupal_write_record() may have updated our transaction - so store it
        $ipn_transactions[$key] = $ipn_transaction;
      }
      else {
        // Return false on failure to write this record
        return FALSE;
      }
    }
    else {
      if (drupal_write_record('commerce_paypal_chained_ipn_transaction', $ipn_transaction)) {
        // drupal_write_record() updated our transaction - so store it
        $ipn_transactions[$key] = $ipn_transaction;
      }
      else {
        // Return false on failure to write this record
        return FALSE;
      }
    }
  }
  return TRUE;
}

/**
 * Deletes a stored IPN by ID.
 *
 * @param $id
 *   The ID of the IPN to delete.
 * @param $type
 *   The type of ID you've specified, either the serial numeric ipn_id or the
 *     actual PayPal txn_id. Defaults to txn_id.
 */
function commerce_paypal_chained_ipn_delete($id, $type = 'txn_id') {
  db_delete('commerce_paypal_ipn')
    ->condition($type, $id)
    ->execute();
}

/**
 * Processes an incoming chained payment IPN.
 *
 * @param $debug_ipn
 *   Optionally specify an IPN array for debug purposes; if left empty, the IPN
 *     be pulled from php://input. If an IPN is passed in, validation of the IPN
 *     at PayPal will be bypassed.
 *
 * @return
 *   TRUE or FALSE indicating whether the IPN was successfully processed or not.
 */
function commerce_paypal_chained_process_ipn($debug_ipn = array()) {
  // Load up our payment method instance array
  $payment_method = commerce_payment_method_instance_load('paypal_chained|commerce_payment_paypal_chained');
  // Retrieve the IPN from $_POST if the caller did not supply an IPN array.
  // Note that Drupal has already run stripslashes() on the contents of the
  // $_POST array at this point, so we don't need to worry about them.
  if (empty($debug_ipn)) {
    // We can't rely on $_POST for our IPN vars because PayPal sends them back
    // nested in such a way that PHP can't interpret the nested transactions
    // array
    // So in this case we have nested POST data we have to parse into an array
    // by hand
    $raw_ipn = file_get_contents("php://input");
    // Exit now if we have no ipn data.
    if (empty($raw_ipn)) {
      watchdog('commerce_paypal_chained', 'IPN URL accessed with no POST data submitted.', array(), WATCHDOG_WARNING);
      return FALSE;
    }
    // Decode the URL-encoded bits
    $decoded_ipn = urldecode($raw_ipn);
    // Break apart our variables
    $vars = explode('&', $decoded_ipn);
    // Initialize the array we'll be filling
    $ipn = array();
    foreach ($vars as $var) {
      // First, split our data pairs up on the first '='
      list($key, $value) = explode('=', $var, 2);
      // So, if $key contains '[x]' then we're looking at data that's part of an
      // array
      // PayPal's format is basically "variable-name[iteration].property-name = value"
      // We'll turn this into $ipn['variable-name'][iteration]['property-name'] = value so we
      // can work with this data in PHP
      if (preg_match("/.*?(\\d+)/is", $key, $matches)) {
        // We are looking at an array
        // Grab the variable name
        $variable_name = substr($key, 0, strpos($key, '['));
        // Our iteration is the integer x in "[x]", which is stored in $matches[1]
        $iteration = $matches[1];
        // Grab the property name
        $property_name = substr($key, strpos($key, '.') + 1);
        // Ok - we have what we need to store this
        $ipn[$variable_name][$iteration][$property_name] = $value;
      }
      else {
        // This is just a regular key-value pair so store as such
        $ipn[$key] = $value;
      }
    }
    // Exit now if we have no pay key
    if (empty($ipn['pay_key'])) {
      watchdog('commerce_paypal_chained', 'IPN URL accessed with no pay_key in POST data submitted.', array(), WATCHDOG_WARNING);
      return FALSE;
    }

    // IPN validation time...
    // Basically, verify with PayPal that it just sent us this message

    // Determine the proper PayPal server to POST to.
    if (!empty($ipn['test_ipn']) && $ipn['test_ipn'] == 1) {
      $host = 'https://www.sandbox.paypal.com/cgi-bin/webscr';
    }
    else {
      $host = 'https://www.paypal.com/cgi-bin/webscr';
    }

    // Process the HTTP request to validate the IPN.
    $response = drupal_http_request($host, array('method' => 'POST', 'data' => 'cmd=_notify-validate&' . $raw_ipn));

    // If an error occurred during processing, log the message and exit.
    if (property_exists($response, 'error')) {
      watchdog('commerce_paypal_chained', 'Attempt to validate IPN failed with error @code: @error', array('@code' => $response->code, '@error' => $response->error), WATCHDOG_ERROR);
      return FALSE;
    }

    // If the IPN was invalid, log a message and exit.
    if ($response->data == 'INVALID') {
      watchdog('commerce_paypal_chained', 'Invalid IPN received and ignored.', array(), WATCHDOG_ALERT);
      return FALSE;
    }
  }
  else {
    $ipn = $debug_ipn;
  }

  // If the payment method specifies full IPN logging, do it now.
  if (!empty($payment_method['settings']['ipn_logging']) &&
    $payment_method['settings']['ipn_logging'] == 'full_ipn') {
    if (!empty($ipn['pay_key'])) {
      watchdog('commerce_paypal', 'Attempting to process IPN @pay_key. !ipn_log', array('@pay_key' => $ipn['pay_key'], '!ipn_log' => '<pre>' . check_plain(print_r($ipn, TRUE)) . '</pre>'), WATCHDOG_NOTICE);
    }
    else {
      watchdog('commerce_paypal', 'Attempting to process an IPN. !ipn_log', array('!ipn_log' => '<pre>' . check_plain(print_r($ipn, TRUE)) . '</pre>'), WATCHDOG_NOTICE);
    }
  }

  // Exit if the IPN has already been processed.
  if (!empty($ipn['pay_key']) && $prior_ipn = commerce_paypal_chained_ipn_load($ipn['pay_key'])) {
    // TODO
    // Dive down into each item in the pay chain checking status - if all
    // statuses match what they were the last time around, we've already seen
    // this.  Otherwise - if a status is different then we need to adjust the
    // transaction associated with that chained payment in
    // commerce_paypal_chained_paypal_ipn_process().
    // TODO - verify IPNs are sent out when any piece of the chain changes
    // For now - we only accept one IPN with this paykey
    watchdog('commerce_paypal', 'Attempted to process an IPN that has already been processed with transaction ID @pay_key.', array('@pay_key' => $ipn['pay_key']), WATCHDOG_NOTICE);
    return FALSE;
  }

  // Load the order based on the IPN's invoice number, which we've stored in
  // tracking_id.
  if (!empty($ipn['tracking_id']) && strpos($ipn['tracking_id'], '-') !== FALSE) {
    list($ipn['order_id'], $timestamp) = explode('-', $ipn['tracking_id']);
  }
  elseif (!empty($ipn['tracking_id'])) {
    $ipn['order_id'] = $ipn['tracking_id'];
  }
  else {
    $ipn['order_id'] = 0;
    $timestamp = 0;
  }

  if (!empty($ipn['order_id'])) {
    $order = commerce_order_load($ipn['order_id']);
  }
  else {
    $order = FALSE;
  }
  // Give the payment method module an opportunity to validate the receiver
  // e-mail address and amount of the payment if possible. If a validate
  // function exists, it is responsible for setting its own watchdog message.
  if (!empty($payment_method)) {
    $callback = $payment_method['base'] . '_paypal_ipn_validate';

    // If a validator function existed...
    if (function_exists($callback)) {
      // Only exit if the function explicitly returns FALSE.
      if ($callback($order, $payment_method, $ipn) === FALSE) {
        return FALSE;
      }
    }
  }

  // Give the payment method module an opportunity to process the IPN.
  if (!empty($payment_method)) {
    $callback = $payment_method['base'] . '_paypal_ipn_process';

    // If a processing function existed...
    if (function_exists($callback)) {
      // Skip saving if the function explicitly returns FALSE, meaning the IPN
      // wasn't actually processed.
      if ($callback($order, $payment_method, $ipn) !== FALSE) {
        // Save the processed IPN details.
        commerce_paypal_chained_ipn_save($ipn);
      }
    }
  }

  // Invoke the hook here so implementations have access to the order and
  // payment method if available and a saved IPN array that includes the payment
  // transaction ID if created in the payment method's default process callback.
  module_invoke_all('commerce_paypal_ipn_process', $order, $payment_method, $ipn);
}

/**
 * Payment method callback: validate an IPN based on receiver e-mail address,
 *   price, and other parameters as possible.
 */
function commerce_paypal_chained_paypal_ipn_validate($order, $payment_method, $ipn) {
  // TODO - return FALSE if chain described in this IPN doesn't match this
  // order's chain

  // Prepare the IPN data for inclusion in the watchdog message if enabled.
  $ipn_data = '';

  if (!empty($payment_method['settings']['ipn_logging']) &&
    $payment_method['settings']['ipn_logging'] == 'full_ipn') {
    $ipn_data = '<pre>' . check_plain(print_r($ipn, TRUE)) . '</pre>';
  }

  // Log a message including the PayPal transaction ID if available.
  if (!empty($ipn['pay_key'])) {
    watchdog('commerce_paypal_chained', 'IPN validated for Order @order_number with ID @pay_key.!ipn_data', array('@order_number' => $order->order_number, '@pay_key' => $ipn['pay_key'], '!ipn_data' => $ipn_data), WATCHDOG_NOTICE);
  }
  else {
    watchdog('commerce_paypal_chained', 'IPN validated for Order @order_number.!ipn_data', array('@order_number' => $order->order_number, '!ipn_data' => $ipn_data), WATCHDOG_NOTICE);
  }
}

/**
 * Payment method callback: process an IPN once it's been validated.
 */
function commerce_paypal_chained_paypal_ipn_process($order, $payment_method, &$ipn) {
  // For now, we only recognize COMPLETED paychains
  // Exit when we don't get a payment status of COMPLETED.
  if ($ipn['status'] != 'COMPLETED') {
    commerce_payment_redirect_pane_previous_page($order);
    return FALSE;
  }
  // Great - we're looking at a completed chained payment
  // Store each of the effective payments as commerce transactions
  foreach ($ipn['transaction'] as $transaction) {
    
  }
  $transaction = commerce_payment_transaction_new('paypal_chained', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  
  $transaction->remote_id = $ipn['pay_key'];
  $transaction->amount = $amount;
  $transaction->currency_code = $order_currency_code;
  $transaction->payload[REQUEST_TIME . '-ipn'] = $ipn;

  // Set the transaction's statuses based on the IPN's payment_status.
  $transaction->remote_status = $ipn['status'];

  // If we didn't get an approval response code...
  switch ($ipn['status']) {
    case 'COMPLETED':
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $transaction->message = t('The payment has completed.');
      break;
  }
  
  // Save the transaction information.
  commerce_payment_transaction_save($transaction);
  $ipn['transaction_id'] = $transaction->transaction_id;
  
  commerce_payment_redirect_pane_next_page($order);
  watchdog('commerce_paypal_wps', 'IPN processed for Order @order_number with ID @txn_id.', array('@txn_id' => $ipn['txn_id'], '@order_number' => $order->order_number), WATCHDOG_INFO);
  
  
  
  
  
  
  
  
  

  // If this is a prior authorization capture IPN for which we've already
  // created a transaction...
  if (in_array($ipn['payment_status'], array('Voided', 'Completed')) &&
    !empty($ipn['auth_id']) && $auth_ipn = commerce_paypal_chained_ipn_load($ipn['auth_id'])) {
    // Load the prior IPN's transaction and update that with the capture values.
    $transaction = commerce_payment_transaction_load($auth_ipn['transaction_id']);
  }
  else {
    // Create a new payment transaction for the order.
    $transaction = commerce_payment_transaction_new('paypal_chained', $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];
  }

  $transaction->remote_id = $ipn['pay_key'];
  $transaction->amount = commerce_currency_decimal_to_amount($ipn['mc_gross'], $ipn['mc_currency']);
  $transaction->currency_code = $ipn['mc_currency'];
  $transaction->payload[REQUEST_TIME . '-ipn'] = $ipn;

  // Set the transaction's statuses based on the IPN's payment_status.
  $transaction->remote_status = $ipn['payment_status'];

  // If we didn't get an approval response code...
  switch ($ipn['payment_status']) {
    case 'Failed':
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t("The payment has failed. This happens only if the payment was made from your customer’s bank account.");
      break;

    case 'Voided':
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t('The authorization was voided.');
      break;

    case 'Pending':
      $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
      $transaction->message = commerce_paypal_ipn_pending_reason($ipn['pending_reason']);
      break;

    case 'Completed':
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $transaction->message = t('The payment has completed.');
      break;

    case 'Refunded':
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $transaction->message = t('Refund for transaction @pay_key', array('@pay_key' => $ipn['parent_txn_id']));
      break;
  }

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);
  $ipn['transaction_id'] = $transaction->transaction_id;

  // Create a billing profile based on the IPN if enabled.
  if (!empty($payment_method['settings']['ipn_create_billing_profile']) && isset($order->commerce_customer_billing)) {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    // If this order does not have a billing profile yet...
    if ($order_wrapper->commerce_customer_billing->value() === NULL) {
      // Ensure we have the required data in the IPN.
      if (empty($ipn['residence_country']) || empty($ipn['first_name']) || empty($ipn['last_name'])) {
        $data = array_intersect_key($ipn, drupal_map_assoc(array('residence_country', 'first_name', 'last_name')));
        watchdog('commerce_paypal_chained', 'A billing profile for Order @order_number could not be created due to insufficient data in the IPN:!data', array('@order_number' => $order->order_number, '!data' => '<pre>'. check_plain(print_r($data, TRUE)) .'</pre>'), WATCHDOG_WARNING);
      }
      else {
        // Create the new profile now.
        $profile = commerce_customer_profile_new('billing', $order->uid);

        // Add the address value.
        $profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $profile);

        $profile_wrapper->commerce_customer_address = array_merge(addressfield_default_values(), array(
          'country' => $ipn['residence_country'],
          'name_line' => $ipn['first_name'] . ' ' . $ipn['last_name'],
          'first_name' => $ipn['first_name'],
          'last_name' => $ipn['last_name'],
        ));

        // Save the profile, reference it from the order, and save the order.
        $profile_wrapper->save();
        $order_wrapper->commerce_customer_billing = $profile_wrapper;
        $order_wrapper->save();

        watchdog('commerce_paypal_chained', 'Billing profile created for Order @order_number containing the first and last names and residence country of the customer based on IPN data.', array('@order_number' => $order->order_number));
      }
    }
  }

  commerce_payment_redirect_pane_next_page($order);
  watchdog('commerce_paypal_chained', 'IPN processed for Order @order_number with ID @pay_key.', array('@pay_key' => $ipn['pay_key'], '@order_number' => $order->order_number), WATCHDOG_INFO);
}

/**
 * Builds a Website Payments Standard form from an order object.
 *
 * @param $order
 *   The fully loaded order being paid for.
 * @param $settings
 *   An array of settings used to build out the form, including:
 *   - server: which server to use, either sandbox or live
 *   - business: the PayPal e-mail address the payment submits to
 *   - cancel_return: the URL PayPal should send the user to on cancellation
 *   - return: the URL PayPal should send the user to on successful payment
 *   - currency_code: the PayPal currency code to use for this payment if the
 *     total for the order is in a non-PayPal supported currency
 *   - language: the PayPal language code to use on the payment form
 *   - payment_action: the PayPal payment action to use: sale, authorization,
 *     or order
 *   - payment_method: optionally a payment method instance ID to include in the
 *     IPN notify_url
 *
 * @return
 *   A renderable form array.
 */
function commerce_paypal_chained_order_form($form, &$form_state, $order, $settings) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Determine the currency code to use to actually process the transaction,
  // which will either be the default currency code or the currency code of the
  // order if it's supported by PayPal if that option is enabled.
  $currency_code = $settings['currency_code'];
  $order_currency_code = $wrapper->commerce_order_total->currency_code->value();

  if (!empty($settings['allow_supported_currencies']) && in_array($order_currency_code, array_keys(commerce_paypal_currencies('paypal_chained')))) {
    $currency_code = $order_currency_code;
  }

  $amount = $wrapper->commerce_order_total->amount->value();

  // Ensure a default value for the payment_method setting.
  $settings += array('payment_method' => '');

  // Build the data array that will be translated into hidden form values.
  $data = array(
    // Specify the checkout experience to present to the user.
    'cmd' => '_cart',

    // Signify we're passing in a shopping cart from our system.
    'upload' => 1,

    // The store's PayPal e-mail address
    'business' => $settings['business'],

    // The path PayPal should send the IPN to
    'notify_url' => commerce_paypal_ipn_url($settings['payment_method']),

    // Set the correct character set
    'charset' => 'utf-8',

    // Do not display a comments prompt at PayPal
    'no_note' => 1,

    // Do not display a shipping address prompt at PayPal
    'no_shipping' => 1,

    // Return to the review page when payment is canceled
    'cancel_return' => $settings['cancel_return'],

    // Return to the payment redirect page for processing successful payments
    'return' => $settings['return'],

    // Return to this site with payment data in the POST
    'rm' => 2,

    // The type of payment action PayPal should take with this order
    'paymentaction' => $settings['payment_action'],

    // Set the currency and language codes
    'currency_code' => $currency_code,
    'lc' => $settings['language'],

    // Use the timestamp to generate a unique invoice number
    'invoice' => commerce_paypal_ipn_invoice($order),

    // Define a single item in the cart representing the whole order
    'amount_1' => commerce_paypal_price_amount(commerce_currency_convert($amount, $order_currency_code, $currency_code), $currency_code),
    'item_name_1' => t('Order @order_number at @store', array('@order_number' => $order->order_number, '@store' => variable_get('site_name', url('<front>', array('absolute' => TRUE))))),
    'on0_1' => t('Product count'),
    'os0_1' => commerce_line_items_quantity($wrapper->commerce_line_items, commerce_product_line_item_types()),
  );

  // Allow modules to alter parameters of the API request.
  drupal_alter('commerce_paypal_chained_order_form_data', $data, $order);

  $form['#action'] = commerce_paypal_chained_server_url($settings['server']);

  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $form[$name] = array('#type' => 'hidden', '#value' => $value);
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to PayPal'),
  );

  return $form;
}

/**
 * Returns the URL to the specified PayPal Chained server.
 *
 * @param $server
 *   Either sandbox or live indicating which server to get the URL for.
 *
 * @return
 *   The URL to use to submit requests to the PayPal Chained server.
 */
function commerce_paypal_chained_server_url($server) {
  switch ($server) {
    case 'sandbox':
      return 'https://www.sandbox.paypal.com/cgi-bin/webscr';
    case 'live':
      return 'https://www.paypal.com/cgi-bin/webscr';
  }
}

/**
 * Returns an array of all possible language codes.
 */
function commerce_paypal_chained_languages() {
  return array(
    t('By country') => array(
      'AU' => t('Australia'),
      'AT' => t('Austria'),
      'BE' => t('Belgium'),
      'BR' => t('Brazil'),
      'CA' => t('Canada'),
      'CN' => t('China'),
      'FR' => t('France'),
      'DE' => t('Germany'),
      'IT' => t('Italy'),
      'NL' => t('Netherlands'),
      'PL' => t('Poland'),
      'PT' => t('Portugal'),
      'RU' => t('Russia'),
      'ES' => t('Spain'),
      'CH' => t('Switzerland'),
      'GB' => t('United Kingdom'),
      'US' => t('United States'),
    ),
    t('By language') => array(
      'da_DK' => t('Danish (for Denmark only)'),
      'he_IL' => t('Hebrew (for all)'),
      'id_ID' => t('Indonesian (for Indonesia only)'),
      'jp_JP' => t('Japanese (for Japan only)'),
      'no_NO' => t('Norwegian (for Norway only)'),
      'pt_BR' => t('Brazilian Portuguese (for Portugal and Brazil only)'),
      'ru_RU' => t('Russian (for Lithuania, Latvia, and Ukraine only)'),
      'sv_SE' => t('Swedish (for Sweden only)'),
      'th_TH' => t('Thai (for Thailand only)'),
      'tr_TR' => t('Turkish (for Turkey only)'),
      'zh_CN' => t('Simplified Chinese (for China only)'),
      'zh_HK' => t('Traditional Chinese (for Hong Kong only)'),
      'zh_TW' => t('Traditional Chinese (for Taiwan only)'),
    ),
  );
}
